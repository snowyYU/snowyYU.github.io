<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snowyYU</title>
  
  <subtitle>dream passionately</subtitle>
  <link href="https://snowyyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://snowyyu.github.io/"/>
  <updated>2022-07-06T07:22:53.000Z</updated>
  <id>https://snowyyu.github.io/</id>
  
  <author>
    <name>snowyYU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mjs 和 cjs</title>
    <link href="https://snowyyu.github.io/2022/07/06/mjs-%E5%92%8C-cjs/"/>
    <id>https://snowyyu.github.io/2022/07/06/mjs-%E5%92%8C-cjs/</id>
    <published>2022-07-06T07:22:53.000Z</published>
    <updated>2022-07-06T07:22:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://stackoverflow.com/questions/57492546/what-is-the-difference-between-js-and-mjs-files">What is the difference between .js and .mjs files?</a></p><p><a href="https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1">Node Modules at War: Why CommonJS and ES Modules Can’t Get Along</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; class=&quot;headerlink&quot; title=&quot;reference&quot;&gt;&lt;/a&gt;reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questio</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>package.json 参数</title>
    <link href="https://snowyyu.github.io/2022/07/04/package-json-%E5%8F%82%E6%95%B0/"/>
    <id>https://snowyyu.github.io/2022/07/04/package-json-%E5%8F%82%E6%95%B0/</id>
    <published>2022-07-04T08:01:39.000Z</published>
    <updated>2022-07-04T08:01:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中 package.json 参数众多，在此作记录。<br>原文见<a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json">此 (v8)</a></p><span id="more"></span><h2 id="dependencies-中的版本符号说明"><a href="#dependencies-中的版本符号说明" class="headerlink" title="dependencies 中的版本符号说明"></a>dependencies 中的版本符号说明</h2><blockquote><p>原文见 <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#dependencies">此</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目中 package.json 参数众多，在此作记录。&lt;br&gt;原文见&lt;a href=&quot;https://docs.npmjs.com/cli/v8/configuring-npm/package-json&quot;&gt;此 (v8)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="npm" scheme="https://snowyyu.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>TSConfig 笔记</title>
    <link href="https://snowyyu.github.io/2022/06/21/TSConfig-%E7%AC%94%E8%AE%B0/"/>
    <id>https://snowyyu.github.io/2022/06/21/TSConfig-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-06-21T07:51:42.000Z</published>
    <updated>2022-06-21T07:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>tsconfig.json jsconfig.json 等文件配置的详解，<a href="https://www.typescriptlang.org/tsconfig">原文在此</a></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;tsconfig.json jsconfig.json 等文件配置的详解，&lt;a href=&quot;https://www.typescriptlang.org/tsconfig&quot;&gt;原文在此&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>create-vue 浅析</title>
    <link href="https://snowyyu.github.io/2022/05/13/create-vue-%E6%B5%85%E6%9E%90/"/>
    <id>https://snowyyu.github.io/2022/05/13/create-vue-%E6%B5%85%E6%9E%90/</id>
    <published>2022-05-13T03:37:46.000Z</published>
    <updated>2022-05-13T03:37:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>需要仿照 create-vue 项目写一个相似的项目，用于方便项目的初始化</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;需要仿照 create-vue 项目写一个相似的项目，用于方便项目的初始化&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Welcome～</title>
    <link href="https://snowyyu.github.io/2022/03/02/Welcome%EF%BD%9E/"/>
    <id>https://snowyyu.github.io/2022/03/02/Welcome%EF%BD%9E/</id>
    <published>2022-03-02T01:34:08.000Z</published>
    <updated>2022-03-02T01:34:08.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>2022前端建设-技术篇</title>
    <link href="https://snowyyu.github.io/2022/02/14/2022%E5%89%8D%E7%AB%AF%E5%BB%BA%E8%AE%BE-%E6%8A%80%E6%9C%AF%E7%AF%87/"/>
    <id>https://snowyyu.github.io/2022/02/14/2022%E5%89%8D%E7%AB%AF%E5%BB%BA%E8%AE%BE-%E6%8A%80%E6%9C%AF%E7%AF%87/</id>
    <published>2022-02-14T09:59:41.000Z</published>
    <updated>2022-02-14T09:59:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>方向</p><span id="more"></span><blockquote><p>起点</p></blockquote><ul><li>丰富项目 seed 模版 （深入探索模版渲染技术）</li><li>开发高效脚手架，示例交互项目</li></ul><h2 id="规范建设"><a href="#规范建设" class="headerlink" title="规范建设"></a>规范建设</h2><ul><li>eslint （vue3-essential，ts/recommended …）</li><li>Gitlab 规范 (repo)，COMMIT 规范，CICD 规范</li><li>css、html、js 规范文档，</li><li>vscode setting (async setting 结合 git gist)</li></ul><h2 id="技术-amp-质量性能提升"><a href="#技术-amp-质量性能提升" class="headerlink" title="技术&amp;质量性能提升"></a>技术&amp;质量性能提升</h2><ul><li>Vue3</li><li>typescript 抽象语法树</li><li>pnpm</li><li>微前端</li><li>业务组件库（dumpling-plus，dumpling-ui）</li></ul><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><ul><li>打包构建（项目及组件库，工具库）脚本</li><li>vite</li><li>rollup</li></ul><h2 id="相关项目"><a href="#相关项目" class="headerlink" title="相关项目"></a>相关项目</h2><ul><li>博客</li><li>门户</li><li>错误监控</li><li>性能监控</li><li>统计分析</li><li>低代码</li></ul><h2 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设"></a>团队建设</h2><ul><li>分享</li><li>code review</li><li>gitteam blog （hexo engine）（掘金，知乎）</li></ul><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><ul><li>接触更多框架使用（react，sevlet）</li><li>bff 拓展（nestjs）</li></ul><h2 id=""><a href="#" class="headerlink" title="!!!"></a>!!!</h2><ul><li>业务组件库</li><li></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;方向&lt;/p&gt;</summary>
    
    
    
    
    <category term="summary" scheme="https://snowyyu.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>pnpm</title>
    <link href="https://snowyyu.github.io/2021/12/25/pnpm/"/>
    <id>https://snowyyu.github.io/2021/12/25/pnpm/</id>
    <published>2021-12-25T03:51:30.000Z</published>
    <updated>2021-12-25T03:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pnpm-create"><a href="#pnpm-create" class="headerlink" title="pnpm create"></a>pnpm create</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Usage: pnpm create &lt;name&gt;</span><br><span class="line">       pnpm create &lt;name-without-create&gt;</span><br><span class="line">       pnpm create &lt;@scope&gt;</span><br><span class="line"></span><br><span class="line">Creates a project from a `create-*` starter kit.</span><br><span class="line"></span><br><span class="line">Visit https://pnpm.io/6.x/cli/create <span class="keyword">for</span> documentation about this <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><p>此命令相当于 <code>npm init</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Create a package.json file</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">npm init [--force|-f|--<span class="built_in">yes</span>|-y|--scope]</span><br><span class="line">npm init &lt;@scope&gt; (same as `npx &lt;@scope&gt;/create`)</span><br><span class="line">npm init [&lt;@scope&gt;/]&lt;name&gt; (same as `npx [&lt;@scope&gt;/]create-&lt;name&gt;`)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">[-y|--<span class="built_in">yes</span>] [-f|--force]</span><br><span class="line">[-w|--workspace &lt;workspace-name&gt; [-w|--workspace &lt;workspace-name&gt; ...]]</span><br><span class="line">[-ws|--workspaces] [--include-workspace-root]</span><br><span class="line"></span><br><span class="line">aliases: create, innit</span><br><span class="line"></span><br><span class="line">Run <span class="string">&quot;npm help init&quot;</span> <span class="keyword">for</span> more info</span><br></pre></td></tr></table></figure><h3 id="npx-命令"><a href="#npx-命令" class="headerlink" title="npx 命令"></a>npx 命令</h3><blockquote><p><a href="https://www.ruanyifeng.com/blog/2019/02/npx.html">npx 使用</a></p></blockquote><h3 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h3><p>使用此功能来实现多包管理。<br>参考</p><ul><li><a href="https://zhuanlan.zhihu.com/p/373935751">使用 pnpm 构建 Monorepo 项目</a></li><li><a href="https://pnpm.io/workspaces">pnpm workspace</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pnpm-create&quot;&gt;&lt;a href=&quot;#pnpm-create&quot; class=&quot;headerlink&quot; title=&quot;pnpm create&quot;&gt;&lt;/a&gt;pnpm create&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="npm" scheme="https://snowyyu.github.io/categories/npm/"/>
    
    <category term="pnpm" scheme="https://snowyyu.github.io/categories/npm/pnpm/"/>
    
    
    <category term="npm" scheme="https://snowyyu.github.io/tags/npm/"/>
    
    <category term="pnpm" scheme="https://snowyyu.github.io/tags/pnpm/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 使用笔记</title>
    <link href="https://snowyyu.github.io/2021/10/11/TypeScript-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://snowyyu.github.io/2021/10/11/TypeScript-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-11T07:27:46.000Z</published>
    <updated>2021-10-11T07:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小问题-1"><a href="#小问题-1" class="headerlink" title="小问题 1"></a>小问题 1</h2><p>ts 报错默认使用 vscode locale 语言，这样可能不太容易在 google 中查询报错原因，使用如下命令将报错提示设置为英文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --locale en</span><br></pre></td></tr></table></figure><p>unkown 相关类型报错，大概率需要使用 as 关键字进行具体化</p><h2 id="小-tips1"><a href="#小-tips1" class="headerlink" title="小 tips1"></a>小 tips1</h2><h3 id="使用仅含类型的导入导出语法"><a href="#使用仅含类型的导入导出语法" class="headerlink" title="使用仅含类型的导入导出语法"></a>使用仅含类型的导入导出语法</h3><p>推荐使用<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export">仅含类型的导入和导出</a>形式的语法可以避免潜在的 “仅含类型的导入被不正确打包” 的问题，写法示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">SomeThing</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./some-module.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> type &#123; <span class="title class_">SomeThing</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="type-和-interface-异同"><a href="#type-和-interface-异同" class="headerlink" title="type 和 interface 异同"></a>type 和 interface 异同</h3><p>两者其实非常相似，许多情况下两者都可以用，相较来说，interface 更适合直接拓展属性，具体可见如下例子</p><p>扩展 interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bear</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">honey</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bear = <span class="title function_">getBear</span>()</span><br><span class="line">bear.<span class="property">name</span></span><br><span class="line">bear.<span class="property">honey</span></span><br></pre></td></tr></table></figure><p>通过交叉符扩展 type</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Bear</span> = <span class="title class_">Animal</span> &amp; &#123;</span><br><span class="line">  <span class="attr">honey</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bear = <span class="title function_">getBear</span>()</span><br><span class="line">bear.<span class="property">name</span></span><br><span class="line">bear.<span class="property">honey</span></span><br></pre></td></tr></table></figure><p>向 interface 中添加属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">  <span class="attr">ts</span>: <span class="title class_">TypeScriptAPI</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = <span class="string">&#x27;const a = &quot;Hello World&quot;&#x27;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">ts</span>.<span class="title function_">transpileModule</span>(src, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>type 创建后无法更改</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Window</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Window</span> = &#123;</span><br><span class="line">  <span class="attr">ts</span>: <span class="title class_">TypeScriptAPI</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error: Duplicate identifier &#x27;Window&#x27;.</span></span><br></pre></td></tr></table></figure><p><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces">官方具体说明</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;小问题-1&quot;&gt;&lt;a href=&quot;#小问题-1&quot; class=&quot;headerlink&quot; title=&quot;小问题 1&quot;&gt;&lt;/a&gt;小问题 1&lt;/h2&gt;&lt;p&gt;ts 报错默认使用 vscode locale 语言，这样可能不太容易在 google 中查询报错原因，使用如下命令</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>医学影像入门</title>
    <link href="https://snowyyu.github.io/2021/07/14/%E5%8C%BB%E5%AD%A6%E5%BD%B1%E5%83%8F%E5%85%A5%E9%97%A8/"/>
    <id>https://snowyyu.github.io/2021/07/14/%E5%8C%BB%E5%AD%A6%E5%BD%B1%E5%83%8F%E5%85%A5%E9%97%A8/</id>
    <published>2021-07-14T15:08:39.000Z</published>
    <updated>2021-07-14T15:08:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在搞 dicom 文件的渲染，涉及较多概念和三方库和文档，在此做下记录</p><span id="more"></span><h2 id="相关工具库概述"><a href="#相关工具库概述" class="headerlink" title="相关工具库概述"></a>相关工具库概述</h2><ul><li><a href="#cornerstone">cornerstone(core)</a>，核心库，解析 imageId，加载 imageLoader，渲染图片，是以下库的基石。<ul><li>**<a href="#imageLoader">image loader</a>**，图片加载器，资源会经由 loader 返回 imageId</li></ul></li><li>**<a href="#cornerstoneTools">cornerstoneTools</a>**，工具库，提供常用的交互工具（缩放，对比度亮度调整，播放帧等等等），可在此基础上开发更高级的工具</li><li>**<a href="#dicomParser">dicomParser</a>**，用以解析 DICOM 文件，获取图片以外的相关信息，比如患者名，影像帧数，等等。具体类目信息见 <a href="https://www.dicomlibrary.com/dicom/dicom-tags/">tag</a></li><li>**<a href="#cornerstoneMath">cornerstoneMath</a>**，数学和几何计算用到的库</li><li>**<a href="https://ohif.org/">OHIF</a>**，开放医学影像基金会，在 cornerstone 和 tool 的基础上开发了 react 版本的组件</li><li>**<a href="">OHIF viewer</a>**，</li><li>**<a href="">OHIF tracker</a>**，</li></ul><h2 id="cornerstone"><a href="#cornerstone" class="headerlink" title="cornerstone"></a>cornerstone</h2><ul><li><a href="https://docs.cornerstonejs.org/">文档</a></li><li><a href="https://harrychen0506.github.io/cornerstone-analysis/core/concepts/images.html">中文文档（非官方）</a></li><li><a href="https://docs.cornerstonejs.org/">github</a></li><li><a href="https://rawgit.com/cornerstonejs/cornerstone/master/example/index.html">examples</a> - <a href="https://github.com/cornerstonejs/cornerstone/tree/master/example">code</a></li></ul><h2 id="cornerstoneTools"><a href="#cornerstoneTools" class="headerlink" title="cornerstoneTools"></a>cornerstoneTools</h2><ul><li><a href="https://tools.cornerstonejs.org/">文档</a></li><li><a href="https://github.com/cornerstonejs/cornerstoneTools">github</a></li><li><a href="https://tools.cornerstonejs.org/examples/">examples</a> - <a href="https://github.com/cornerstonejs/cornerstoneTools/tree/gh-pages/examples">code</a></li></ul><h3 id="imageLoader"><a href="#imageLoader" class="headerlink" title="imageLoader"></a>imageLoader</h3><h4 id="Cornerstone-WADO-image-loader"><a href="#Cornerstone-WADO-image-loader" class="headerlink" title="Cornerstone WADO image loader"></a>Cornerstone WADO image loader</h4><ul><li><a href="https://github.com/cornerstonejs/cornerstoneWADOImageLoader">github</a></li></ul><h4 id="Cornerstone-Web-image-loader"><a href="#Cornerstone-Web-image-loader" class="headerlink" title="Cornerstone Web image loader"></a>Cornerstone Web image loader</h4><p>此 loader 用来加载 web 图片，比如，png，jpeg 格式的图片</p><ul><li><a href="https://github.com/cornerstonejs/cornerstoneWebImageLoader">github</a></li><li><a href="https://rawgit.com/cornerstonejs/cornerstoneWebImageLoader/master/examples/index.html">examples</a></li></ul><h2 id="dicomParser"><a href="#dicomParser" class="headerlink" title="dicomParser"></a>dicomParser</h2><ul><li><a href="https://github.com/cornerstonejs/dicomParser">github</a></li><li><a href="https://rawgit.com/cornerstonejs/dicomParser/master/examples/index.html">examples</a></li><li><a href="https://www.dicomlibrary.com/dicom/dicom-tags/">tag</a></li></ul><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>很多时候需要根据 tag 值拿到对应的信息，推荐一个 <a href="https://github.com/smikitky/vscode-dicom-dump">vscode 插件</a></p><h2 id="cornerstoneMath"><a href="#cornerstoneMath" class="headerlink" title="cornerstoneMath"></a>cornerstoneMath</h2><ul><li><a href="https://github.com/cornerstonejs/cornerstoneMath">github</a></li></ul><h2 id="OHIF-viewer"><a href="#OHIF-viewer" class="headerlink" title="OHIF viewer"></a>OHIF viewer</h2><ul><li><a href="https://docs.ohif.org/">文档</a></li><li><a href="https://github.com/cornerstonejs/cornerstoneMath">github</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在搞 dicom 文件的渲染，涉及较多概念和三方库和文档，在此做下记录&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>node 相关依赖</title>
    <link href="https://snowyyu.github.io/2020/12/21/node-%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96/"/>
    <id>https://snowyyu.github.io/2020/12/21/node-%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96/</id>
    <published>2020-12-21T09:49:05.000Z</published>
    <updated>2020-12-21T09:49:05.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>配置husky与lint-staged用以实现快照生成前的代码检查和格式化</title>
    <link href="https://snowyyu.github.io/2020/12/08/%E9%85%8D%E7%BD%AEhusky%E4%B8%8Elint-staged%E7%94%A8%E4%BB%A5%E5%AE%9E%E7%8E%B0%E5%BF%AB%E7%85%A7%E7%94%9F%E6%88%90%E5%89%8D%E7%9A%84%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>https://snowyyu.github.io/2020/12/08/%E9%85%8D%E7%BD%AEhusky%E4%B8%8Elint-staged%E7%94%A8%E4%BB%A5%E5%AE%9E%E7%8E%B0%E5%BF%AB%E7%85%A7%E7%94%9F%E6%88%90%E5%89%8D%E7%9A%84%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96/</id>
    <published>2020-12-08T13:43:47.000Z</published>
    <updated>2020-12-08T13:43:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的项目中，团队为了保持代码风格的统一会统一要求为各自的 vs-code 安装 <strong>prettier</strong> 插件，然后在项目中添加 <strong>.prettierrc</strong> 配置文件，还需要设置 vs-code 中的自动保存时使用 <strong>prettier</strong> 插件 格式化代码。同样为了减少低级的代码错误，也引进了 <strong>eslint</strong> 进行代码的检查。现引入 husky 和 lint-stage 来优化协作流程</p><span id="more"></span><p><strong>vue</strong> 项目在初始化的时候可以直接选择启用 <code>Lint and fix on commit</code>，如下</p><p><img src="http://ww1.sinaimg.cn/large/40c136bfgy1glgvu3ivx9j20v00caqf6.jpg" alt="WX20201208-234451@2x.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先安装 Eslint 和 Prettier </p><blockquote><p>如果原项目是小程序之类的没有 package.json 文件，需要先 <code>npm init</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint --save-dev  </span><br></pre></td></tr></table></figure><p>配置下 eslint，新增 .eslintrc.js 和 .eslintignore 文件，配置如下</p><blockquote><p>如果需要支持 typescript，还需 <code>npm i -d @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint.js  </span></span><br><span class="line"><span class="comment">// for ts //考虑到小程序初始化ts时已有的ts代码通过不了此配置下的校验，所以使用 ts 版本的 precommit 要慎重</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>, <span class="comment">//定义ESLint的解析器</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>], <span class="comment">//定义文件继承的子规范</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@typescript-eslint&#x27;</span>], <span class="comment">//定义了该eslint文件所依赖的插件</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="comment">//指定代码的运行环境</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">commonjs</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">  <span class="comment">//全局变量</span></span><br><span class="line">  <span class="attr">globals</span>: &#123;</span><br><span class="line">    <span class="attr">__DEV__</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__WECHAT__</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">__ALIPAY__</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title class_">App</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title class_">Page</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title class_">Component</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title class_">Behavior</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">wx</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">getApp</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">getCurrentPages</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prettier --save-dev </span><br></pre></td></tr></table></figure><p>新增 prettierrc.js 文件，配置如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">eslintIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">stylelintIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行 lint-stage 的安装配置命令，此命令会同时安装并配置 husky </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx mrm lint-staged</span><br></pre></td></tr></table></figure><p>最终 package.json 文件相关配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.15.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.5.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stylelint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stylelint-config-standard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^20.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint:js &amp;&amp; npm run lint:style &amp;&amp; npm run lint:prettier&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --fix \&quot;**/*.js\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stylelint --fix \&quot;**/*.wxss\&quot; --syntax css&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write \&quot;**/*.(js|wxss|json)\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;*.wxss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stylelint --fix --syntax css&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,wxss,md&#125;&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里同时引入了 stylelint 用来校验 wxss</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前的项目中，团队为了保持代码风格的统一会统一要求为各自的 vs-code 安装 &lt;strong&gt;prettier&lt;/strong&gt; 插件，然后在项目中添加 &lt;strong&gt;.prettierrc&lt;/strong&gt; 配置文件，还需要设置 vs-code 中的自动保存时使用 &lt;strong&gt;prettier&lt;/strong&gt; 插件 格式化代码。同样为了减少低级的代码错误，也引进了 &lt;strong&gt;eslint&lt;/strong&gt; 进行代码的检查。现引入 husky 和 lint-stage 来优化协作流程&lt;/p&gt;</summary>
    
    
    
    <category term="standard" scheme="https://snowyyu.github.io/categories/standard/"/>
    
    
    <category term="npm" scheme="https://snowyyu.github.io/tags/npm/"/>
    
    <category term="standard" scheme="https://snowyyu.github.io/tags/standard/"/>
    
  </entry>
  
  <entry>
    <title>vue和angular异同</title>
    <link href="https://snowyyu.github.io/2020/11/04/vue%E5%92%8Cangular%E5%BC%82%E5%90%8C/"/>
    <id>https://snowyyu.github.io/2020/11/04/vue%E5%92%8Cangular%E5%BC%82%E5%90%8C/</id>
    <published>2020-11-04T15:25:10.000Z</published>
    <updated>2020-11-04T15:25:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近重新看回 angular，其1.X版本作为第一个接触到的框架，给我留下了深刻的印象，近两年的项目用的基本都是vue，感觉现在是时候总结记录下他们的异同了</p><span id="more"></span><p>因为 vue3 还没上手实际项目，以下讨论的 vue 指的是vue2.X 版本</p><p>从以下几个方面聊聊</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li><strong>angular</strong> 有着较为统一的目录结构，一般每个功能页面（视图-由组件和关联的模版构成）都有，template，component，service，样式文件（css,scss,less），举例如下</li></ul><p><img src="http://ww1.sinaimg.cn/large/40c136bfgy1gke4flbxt4j20fe09ijs6.jpg" alt="WX20201105-110902@2x.png"></p><ul><li><p><strong>angular</strong> 在功能页面之上，还有更高层级的模块（module）概念，每个 <strong>angular</strong> 应用都有一个根模块，通常命名为 AppModule。根模块提供了用来启动应用的引导机制。 一个应用通常会包含很多特性模块。</p></li><li><p><strong>vue</strong> 的目录就比较松散了，每个人都有自己的分层想法，不过还是建议以 vue 的<strong>风格指南</strong>作为开发中的标准</p></li><li><p><strong>vue</strong> 其实是由一个个组件构成的，没有 angular 这么多别的东西，vue 的入口文件为 main.js</p></li></ul><h2 id="模版部分"><a href="#模版部分" class="headerlink" title="模版部分"></a>模版部分</h2><ul><li><strong>vue</strong> 是用了虚拟dom（virtual dom），展示的为编译后的模版</li></ul><p><img src="http://ww1.sinaimg.cn/large/40c136bfgy1gke51ze13gj20fk0gg406.jpg" alt="WX20201105-112937.png"></p><p><img src="http://ww1.sinaimg.cn/large/40c136bfgy1gke52nf3mlj20pc0epacq.jpg" alt="WX20201105-112905.png"></p><ul><li><strong>angular</strong> 模版基于 web component 标准，如下，分别为代码和Google开发者工具中的显示</li></ul><p><img src="http://ww1.sinaimg.cn/large/40c136bfgy1gke4k6fl7uj211k0gctcj.jpg" alt="WX20201105-111250@2x.png"></p><p><img src="http://ww1.sinaimg.cn/large/40c136bfgy1gke4kj5aerj20rp08agnu.jpg" alt="WX20201105-111324.png"></p><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><ul><li><strong>angular</strong> 的脚手架非常强大，可以使用其中的命令创建，删除 module，service，component，route 等，并且有自动注入的功能，推荐使用命令创建模块组件等</li></ul><blockquote><p>经常会给脚手架命令加上参数，比如 <code>ng new routing-app --routing</code> 生成一个带有应用路由模块（AppRoutingModule）的基本 Angular 应用</p></blockquote><ul><li><strong>vue</strong> 等脚手架没有这么多辅助开发等命令，不过可以使用 <code>vue ui</code> 打开一个项目的可视化管理页面，进行包的增删操作等</li></ul><p><img src="http://ww1.sinaimg.cn/large/40c136bfgy1gkebrx59lkj22l61jogwc.jpg" alt="WX20201105-152425@2x.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近重新看回 angular，其1.X版本作为第一个接触到的框架，给我留下了深刻的印象，近两年的项目用的基本都是vue，感觉现在是时候总结记录下他们的异同了&lt;/p&gt;</summary>
    
    
    
    
    <category term="angular" scheme="https://snowyyu.github.io/tags/angular/"/>
    
    <category term="vue" scheme="https://snowyyu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>nginx笔记</title>
    <link href="https://snowyyu.github.io/2020/10/23/nginx%E7%AC%94%E8%AE%B0/"/>
    <id>https://snowyyu.github.io/2020/10/23/nginx%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-23T07:09:13.000Z</published>
    <updated>2020-10-23T07:09:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>像自己的 git 笔记一样，记录下自己安装以及使用的过程与心得，方便之后的查看</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 <strong>brew</strong> 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><blockquote><p>正常情况下执行完此命令后是看不到什么输出的 （实际上已经执行成功了）</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/40c136bfgy1gk3p0cgqt2j20g7037t9x.jpg" alt="nginxStart.png"></p><p>启动后可通过如下命令控制服务器的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s signal</span><br></pre></td></tr></table></figure><p><strong>signal</strong>的值可能如下</p><ul><li>stop — fast shutdown</li><li>quit — graceful shutdown</li><li>reload — reloading the configuration file</li><li>reopen — reopening the log files</li></ul><blockquote><p>使用 quit 参数会在主线程处理完当前请求后停止 nginx 线程</p></blockquote><p>每次修改完配置文件后需要重新执行 reload 命令</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>有时可能会登录一个不熟悉的服务器，需要看下 nginx 配置的位置，可使用 <code>nginx -t</code> 命令查看下位置</p></blockquote><p>在 mac 系统中，相关的几个路径</p><ul><li><code>/usr/local/etc/nginx/nginx.conf</code> （nginx 配置文件路径）</li><li><code>/usr/local/var/www</code> （nginx 服务器默认的根目录）</li><li><code>/usr/local/Cellar/nginx/1.17.9</code> （nginx 的安装路径）</li><li><code>/usr/local/var/log/nginx/error.log</code> （nginx 默认的日志路径）</li></ul><p><strong>nginx</strong>配置部分是重中之重</p><p>这里举一个例子，下面的配置了服务器的 监听端口，重定向位置，代理服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8089</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html/web-mobile;                <span class="comment">#入口目录</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /api &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.0.235:8091;  <span class="comment">#代理的目标服务器</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul><li><strong>nginx</strong> 有一个主线程和若干个工作线程</li></ul><h2 id="about"><a href="#about" class="headerlink" title="about"></a>about</h2><ul><li><a href="https://nginx.org/en/docs/beginners_guide.html">beginner’s guide</a></li><li><a href="https://blog.imkasen.com/nginx-beginner-guide-zh.html">beginner’s guide 翻译</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;像自己的 git 笔记一样，记录下自己安装以及使用的过程与心得，方便之后的查看&lt;/p&gt;</summary>
    
    
    
    <category term="nginx" scheme="https://snowyyu.github.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://snowyyu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>手写一个Promise</title>
    <link href="https://snowyyu.github.io/2020/08/19/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAPromise/"/>
    <id>https://snowyyu.github.io/2020/08/19/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAPromise/</id>
    <published>2020-08-19T12:36:17.000Z</published>
    <updated>2020-08-19T12:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>尝试实现一个符合规范的 promise，含大量注释和新得～</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; count &#125; = <span class="built_in">require</span>(<span class="string">&#x27;console&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promisePractice = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="number">12</span>)</span><br><span class="line">  &#125;, <span class="number">4000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promisePractice</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Promise</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区分 resolve() 和 reject() 方法传入的值是 promise 和 then() 方法的返回值 是 promise 的情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;PENDING&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULLFILLED</span> = <span class="string">&#x27;FULLFILLED&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PromiseClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fun</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态初始化</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_status</span> = <span class="variable constant_">PENDING</span></span><br><span class="line">    <span class="comment">// value</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="comment">// 添加成功回调函数队列</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_fullfilledQueues</span> = []</span><br><span class="line">    <span class="comment">// 添加失败回调函数队列</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rejectedQueues</span> = []</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> v !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;must accept a function as a parameter&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">fun</span>(<span class="variable language_">this</span>.<span class="property">_resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">_reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_resolve</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_status</span> !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="comment">// 依次执行成功队列中的函数，并清空队列</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">runFullfilled</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> cb</span><br><span class="line">        <span class="keyword">while</span> ((cb = <span class="variable language_">this</span>.<span class="property">_fullfilledQueues</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">          <span class="title function_">cb</span>(val)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">runrejected</span> = (<span class="params">error</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> cb</span><br><span class="line">        <span class="keyword">while</span> ((cb = <span class="variable language_">this</span>.<span class="property">_rejectedQueues</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">          <span class="title function_">cb</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="title class_">PromiseClass</span>) &#123;</span><br><span class="line">        val.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_status</span> = <span class="variable constant_">FULLFILLED</span></span><br><span class="line">            <span class="title function_">runFullfilled</span>(value)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_value</span> = err</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_status</span> = <span class="variable constant_">REJECTED</span></span><br><span class="line">            <span class="title function_">runrejected</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_value</span> = val</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_status</span> = <span class="variable constant_">FULLFILLED</span></span><br><span class="line">        <span class="title function_">runFullfilled</span>(val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setTimeout(run,0)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">run</span>(), <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_status</span> !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_status</span> = <span class="variable constant_">REJECTED</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = err</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cb</span><br><span class="line">      <span class="keyword">while</span> ((cb = <span class="variable language_">this</span>.<span class="property">_rejectedQueues</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        <span class="title function_">cb</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setTimeout(run,0)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">run</span>(), <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// then 方法必定返回一个 promise</span></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFullfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _status, _value &#125; = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PromiseClass</span>(<span class="function">(<span class="params">onFullfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 封装成功时的回调函数</span></span><br><span class="line">      <span class="keyword">let</span> <span class="title function_">fullfilled</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> onFullfilled !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">onFullfilledNext</span>(value)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="title function_">onFullfilled</span>(value)</span><br><span class="line">            <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">PromiseClass</span>) &#123;</span><br><span class="line">              <span class="comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class="line">              res.<span class="title function_">then</span>(onFullfilledNext, onRejectedNext)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 否则会将返回结果直接作为参数，传入下一个then的Fulfilled回调函数，并立即执行下一个then的Fulfilled回调函数</span></span><br><span class="line">              <span class="title function_">onFullfilledNext</span>(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">onRejectedNext</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 封装失败时的回调函数</span></span><br><span class="line">      <span class="keyword">let</span> <span class="title function_">rejected</span> = (<span class="params">err</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">onRejectedNext</span>(err)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="title function_">onRejected</span>(err)</span><br><span class="line">            <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">PromiseClass</span>) &#123;</span><br><span class="line">              <span class="comment">// 如果当前回调函数返回Promise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class="line">              res.<span class="title function_">then</span>(onFullfilledNext, onRejectedNext)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 否则会将返回结果直接作为参数，传入下一个then的rejected回调函数，并立即执行下一个then的rejected回调函数</span></span><br><span class="line">              <span class="title function_">onRejectedNext</span>(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">onRejectedNext</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">switch</span> (_status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">PENDING</span>:</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_fullfilledQueues</span>.<span class="title function_">push</span>(onFullfilled)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_rejectedQueues</span>.<span class="title function_">push</span>(onRejected)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="attr">FULLFILLED</span>:</span><br><span class="line">          <span class="title function_">fullfilled</span>(_value)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="attr">REJECTED</span>:</span><br><span class="line">          <span class="title function_">rejected</span>(_value)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(reject) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, reject)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val <span class="keyword">instanceof</span> <span class="title class_">PromiseClass</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PromiseClass</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(val)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PromiseClass</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PromiseClass</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> values = []</span><br><span class="line">      count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> [index, promise] <span class="keyword">of</span> list.<span class="title function_">entires</span>()) &#123;</span><br><span class="line">        <span class="comment">// 确保数组中的各项是 PromiseClass的实例，先调用 PromiseClass.resolve</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">resolve</span>(promise).<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            values[index] = res</span><br><span class="line">            count++</span><br><span class="line">            <span class="comment">// 所有状态都为 fullfilled 时返回的PromiseClass状态变成 fullfilled</span></span><br><span class="line">            <span class="keyword">if</span> (count === list.<span class="property">length</span>) <span class="title function_">resolve</span>(values)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 有一个被rejected时返回的MyPromise状态就变成rejected</span></span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">list</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PromiseClass</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> list) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="title class_">PromiseClass</span>.<span class="title function_">resolve</span>(<span class="title function_">cb</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value),</span><br><span class="line">      <span class="function">(<span class="params">reason</span>) =&gt;</span></span><br><span class="line">        <span class="title class_">PromiseClass</span>.<span class="title function_">resolve</span>(<span class="title function_">cb</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;尝试实现一个符合规范的 promise，含大量注释和新得～&lt;/p&gt;</summary>
    
    
    
    
    <category term="promise" scheme="https://snowyyu.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>译-8个有用的scss最佳实践</title>
    <link href="https://snowyyu.github.io/2020/08/19/%E8%AF%91-8%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84scss%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://snowyyu.github.io/2020/08/19/%E8%AF%91-8%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84scss%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-08-19T12:30:47.000Z</published>
    <updated>2020-08-19T12:30:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://dev.to/liaowow/8-css-best-practices-to-keep-in-mind-4n5h">8 SCSS Best Practices to Keep in Mind</a></li><li>原文作者：<a href="https://github.com/liaowow">Annie Liao</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li><li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/article/2020/8-scss-best-practices-to-keep-in-mind.md">https://github.com/xitu/gold-miner/blob/master/article/2020/8-scss-best-practices-to-keep-in-mind.md</a></li><li>译者：<a href="https://github.com/snowyYU">snowyYU</a></li><li>校对者：<a href="https://github.com/onlinelei">onlinelei</a>，<a href="https://github.com/iceytea">iceytea</a></li></ul></blockquote><h1 id="8-个有用的-SCSS-最佳实践"><a href="#8-个有用的-SCSS-最佳实践" class="headerlink" title="8 个有用的 SCSS 最佳实践"></a>8 个有用的 SCSS 最佳实践</h1><p>上周我看了一家公司的代码规范，我发现其中一些规则同样适用于个人项目的开发。</p><p>我觉得以下的 8 个最佳实践特别棒：</p><h2 id="1-移动端优先"><a href="#1-移动端优先" class="headerlink" title="1. 移动端优先"></a>1. 移动端优先</h2><p>做响应式项目的时候，一般会先写 PC 版本的样式，但这会使移动端样式的书写变得特别痛苦。因此，我们应该先进行移动端样式的书写，在移动端样式的基础上向 PC 端的样式拓展。</p><p>不要这样做:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bad</span> &#123;</span><br><span class="line">  <span class="comment">// Desktop code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="comment">// Mobile code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该这样做:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.good</span> &#123;</span><br><span class="line">  <span class="comment">// Mobile code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="comment">// Desktop code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-提前定义好变量"><a href="#2-提前定义好变量" class="headerlink" title="2. 提前定义好变量"></a>2. 提前定义好变量</h2><p>初始化项目中，要先定义 CSS 变量和 mixins，这样可以提升项目的可维护性。</p><p>规范中提到，以下这些属性会经常读取 CSS 变量：</p><ul><li><code>border-radius</code></li><li><code>color</code></li><li><code>font-family</code></li><li><code>font-weight</code></li><li><code>margin</code> (间隔, 常见网格布局的间隔)</li><li><code>transition</code> (持续时间, easing) – 建议用 mixin</li></ul><h2 id="3-不要使用-id-和-important"><a href="#3-不要使用-id-和-important" class="headerlink" title="3. 不要使用 #id 和 !important"></a>3. 不要使用 <code>#id</code> 和 <code>!important</code></h2><p><code>!important</code> 和 <code>#id</code> 这俩太霸道啦，经常会搞乱 CSS 渲染的顺序和展示的优先级，在团队开发中尤甚。</p><p>不要这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#bad</span> &#123;</span><br><span class="line">  <span class="selector-id">#worse</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.good</span> &#123;</span><br><span class="line">  <span class="selector-class">.better</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不要写具体的数值"><a href="#4-不要写具体的数值" class="headerlink" title="4. 不要写具体的数值"></a>4. 不要写具体的数值</h2><p>写样式的时候尽量不要给属性设置具体的数值，从页面渲染的结果上来看，它可能 “恰好合适”；但是其他开发人员可能不理解为什么必须将属性设置为这种特定的数字。因此，尽量写一些有含义的表达式或者计算式来使此处的可读性更高。</p><p>有兴趣的话， 在 CSS Tricks 上有一个 <a href="https://css-tricks.com/magic-numbers-in-css/">说明</a> 指出了使用具体数值的坏处。</p><p>不要这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bad</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.good</span> &#123;</span><br><span class="line">  <span class="comment">// 20px because of font height</span></span><br><span class="line">  <span class="attribute">left</span>: (<span class="variable">$GUTTER</span> - <span class="number">20px</span> - (<span class="variable">$NAV_HEIGHT</span> / <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-描述性良好的命名"><a href="#5-描述性良好的命名" class="headerlink" title="5. 描述性良好的命名"></a>5. 描述性良好的命名</h2><p>很多人都是根据样式的显示结果来命名 CSS。 其实根据结构来命名更好。</p><p>不要这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.huge-font</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Impact&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$COLOR_BLUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.brand__title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Impact&#x27;</span>, serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.u-highlight</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$COLOR_BLUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-值为-0-时的单位"><a href="#6-值为-0-时的单位" class="headerlink" title="6. 值为 0 时的单位"></a>6. 值为 0 时的单位</h2><p>可能根据别的规范和个人习惯的原因对本条有意见，不过为了说明规范对一个项目的重要性。下面这条规则要求你在持续时间为 0 时加上单位（这种情况常见于编写 CSS 动效时，如过渡效果 transition-duration，规定完成过渡效果需要花费的时间（以秒或毫秒计） ），不要为长度为 0 的值指定单位（这里指 width、height、top、margin、padding 等可度量尺寸、位置的属性）。此外，为小数位添加前导零，注意啊，小数位别太长啦，最好别超过三位。</p><p>不要这样做:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.not-so-good</span> &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">4567</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该这样做:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.better</span> &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-单行注释"><a href="#7-单行注释" class="headerlink" title="7. 单行注释"></a>7. 单行注释</h2><p>这里建议在所要描述属性的上一行添加注释。使用块级注释符 (<code>/* */</code>) 不利于注释的删除和取消，所以使用单行注释符 (<code>//</code>) 来替代它。</p><p>不要这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bad</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red; <span class="comment">// 没在属性的上方写注释</span></span><br><span class="line">  <span class="comment">/* padding-top: 30px;</span></span><br><span class="line"><span class="comment">  width: 100% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.good</span> &#123;</span><br><span class="line">  <span class="comment">// 在属性的上方写注释</span></span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="comment">// padding-top: 30px;</span></span><br><span class="line">  <span class="comment">// width: 100%;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-嵌套媒体查询"><a href="#8-嵌套媒体查询" class="headerlink" title="8. 嵌套媒体查询"></a>8. 嵌套媒体查询</h2><p>为了方便的定位媒体查询的声明，不要将它们嵌套在每个选择器中，而是将它们放在本页最顶级 scss 选择器中。</p><p>不要这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bad</span> &#123;</span><br><span class="line"></span><br><span class="line">  &amp;__area &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">568px</span>) &#123;</span><br><span class="line">      <span class="comment">// Code</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;__section &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">568px</span>) &#123;</span><br><span class="line">      <span class="comment">// Code</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.good</span> &#123;</span><br><span class="line"></span><br><span class="line">  &amp;__area &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;__section &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">568px</span>) &#123;</span><br><span class="line">    &amp;__area &#123;</span><br><span class="line">      <span class="comment">// Code</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;__section &#123;</span><br><span class="line">      <span class="comment">// Code</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里虽然只有寥寥几条不尽详细的规范，但是它们在项目中可是相当重要的。如果你见到了觉得很棒棒的 CSS 规范准则，还请在评论区中分享出来！</p><blockquote><p>如果发现译文存在错误或其他需要改进的地方，欢迎到 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 <strong>本文永久链接</strong> 即为本文在 GitHub 上的 MarkDown 链接。</p></blockquote><hr><blockquote><p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;https://dev.to/liaowow/8-css-best-practices-to-keep-in-mind-4n5h&quot;&gt;8 SCSS Best Practices to Keep in Mind&lt;</summary>
      
    
    
    
    
    <category term="css" scheme="https://snowyyu.github.io/tags/css/"/>
    
    <category term="译文" scheme="https://snowyyu.github.io/tags/%E8%AF%91%E6%96%87/"/>
    
    <category term="scss" scheme="https://snowyyu.github.io/tags/scss/"/>
    
    <category term="规范" scheme="https://snowyyu.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>zsh相关</title>
    <link href="https://snowyyu.github.io/2020/07/14/zsh%E7%9B%B8%E5%85%B3/"/>
    <id>https://snowyyu.github.io/2020/07/14/zsh%E7%9B%B8%E5%85%B3/</id>
    <published>2020-07-14T04:13:57.000Z</published>
    <updated>2020-07-14T04:13:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>zsh 相关的 <strong>iTerm2</strong> 和 <strong>oh my zsh</strong> 安装，以及相关主题配置</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开始接触命令行是在用windows的时候，那时就只是用来装装node之类的软件，后来装了 git bash，接触了些很好用的linux命令，就可以减少使用鼠标的次数啦，一定程度上来说还是很爽的。</p><p>之后碗切到了mac，Linux 命令就用的更爽啦(mac os 毕竟是基于 linux 的)，然后就接触到了 fish ，可以直接通过 fish ui 命令直接调出配置页面，可以直接调整文字大小啊，颜色啊，git分支提示，而且还有历史命令提示等功能，从此我的命令行就变得花花绿绿的。再后来，mac 大力推荐 zsh 了，因为 zsh 功能更加强大，所以也就有了本篇。</p><h1 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h1><p>安装 zsh 就不写了，因为 mac 本身就内置了，切换下就好</p><h1 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 <strong>iTerm2</strong></h1><p><a href="https://www.iterm2.com/">iTerm2下载</a></p><blockquote><p>echo $SHELL  // 查看当前命令行解析器</p></blockquote><h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a>oh my zsh</h1><p>方便安装插件，主题等</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过 curl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>通过 wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>刚开始安装时会报 connect refuse 等的错误，我是通过修改 git host 配置来解决的</p></blockquote><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>配置 <strong>.zshrc</strong> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><p>比如添加如下插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  bundler</span><br><span class="line">  dotenv</span><br><span class="line">  osx</span><br><span class="line">  rake</span><br><span class="line">  rbenv</span><br><span class="line">  ruby</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="安装-powerline-font"><a href="#安装-powerline-font" class="headerlink" title="安装 powerline font"></a>安装 powerline font</h2><p>有些主题需要 powerline font 的支持，所以配置主题前先安装 powerline font</p><p>有文章说需要先安装 powerline 再安装 powerline font，实际上我直接按照如下安装的，并没有先装 powerline</p><blockquote><p>可能其中的 install 脚本自带检查安装 powerline 的功能吧</p></blockquote><p>地址在此 <a href="https://github.com/powerline/fonts">powerline fonts</a></p><p>安装方法有多种，我使用了如下的安装方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"><span class="comment"># install</span></span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line">./install.sh</span><br><span class="line"><span class="comment"># clean-up a bit</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">rm</span> -rf fonts</span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>同样是修改 <strong>.zshrc</strong> 文件，修改如下配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>其实安装 <strong>on my zsh</strong> 后，原本的 <strong>.zshrc</strong> 文件的内容会被覆盖，新的内容里增加了大量的说明内容，方便了 zsh 相关的配置</p></blockquote><h1 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h1><blockquote><p>推荐使用 <em>oh my zsh</em> 进行安装管理，具体安装可查看各插件官网</p></blockquote><ul><li><strong>git</strong> 可以快速输入 git 的缩写命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.oh-my-zsh/plugins/git/git.plugin.zsh  // 查看所有的git 缩写命令</span><br></pre></td></tr></table></figure><ul><li><strong><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></strong> 输入对命令正确对话会显示绿色，反之则显示红色</li><li><strong><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></strong> 类似 fish 的 历史命令记录功能</li></ul><p><img src="https://i.loli.net/2020/07/18/uqnvWVCp7IFyG9l.png" alt="image.png"></p><h1 id="上照"><a href="#上照" class="headerlink" title="上照"></a>上照</h1><p>主要是配置了颜色，然后加上背景图片</p><h1 id="go2shell"><a href="#go2shell" class="headerlink" title="go2shell"></a>go2shell</h1><p>很好用，集成在finder中，可以快速在当前目录下调出命令行工具</p><blockquote><p>记得选择 iterm2</p></blockquote><h1 id="about"><a href="#about" class="headerlink" title="about"></a>about</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/103672631">我觉得这篇文的 fish 部分写的很好</a></li><li><a href="https://zhuanlan.zhihu.com/p/37195261">知乎</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;zsh 相关的 &lt;strong&gt;iTerm2&lt;/strong&gt; 和 &lt;strong&gt;oh my zsh&lt;/strong&gt; 安装，以及相关主题配置&lt;/p&gt;</summary>
    
    
    
    
    <category term="shell" scheme="https://snowyyu.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>使用 prettier + eslint 统一代码风格和语法检查</title>
    <link href="https://snowyyu.github.io/2020/07/03/%E4%BD%BF%E7%94%A8-prettier-eslint-%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E5%92%8C%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5/"/>
    <id>https://snowyyu.github.io/2020/07/03/%E4%BD%BF%E7%94%A8-prettier-eslint-%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E5%92%8C%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5/</id>
    <published>2020-07-03T08:59:07.000Z</published>
    <updated>2020-07-03T08:59:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>考虑各项目间的统一，使用 prettier 进行项目的代码风格格式化，使用 eslint 做语法检查，具体规范如下</p><span id="more"></span><h1 id="Prettier-vs-Linters"><a href="#Prettier-vs-Linters" class="headerlink" title="Prettier vs. Linters"></a>Prettier vs. Linters</h1><p>首先说明 Prettier 和 .Linters(ESLint/TSLint/stylelint, etc)的区别，</p><ol><li>Prettier 专注于代码风格上的统一，其配置项较少，是个 Opinionated formatter (就是类似 angular 那种，必须按照它自定的规则来)，</li><li>比如说 ESLint，它其实包括了代码风格规范和语法检查两部分，有众多的规范插件可供选择，其配置项也较为复杂。但在代码风格上，它只能提供异常报错的警示信息，不能直接帮我们输出风格统一的代码。</li></ol><blockquote><p><a href="https://prettier.io/docs/en/comparison.html">How does it compare to ESLint/TSLint/stylelint, etc.?</a></p></blockquote><h1 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h1><p>代码美化部分大致包含：触发自动换行的字符数，强制关键词前后加空格</p><p>prettier 的大部分规则都是不可配置了，只保留了几个争议特别大的规则给用户配置，比如单引号和双引号的选择，也正因如此，对团队的代码风格上的统一也会更有帮助</p><h2 id="风格规范"><a href="#风格规范" class="headerlink" title="风格规范"></a>风格规范</h2><p>直接执行如下命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx prettier --write .</span><br><span class="line">npx prettier --write app/</span><br><span class="line">npx prettier --write app/components/Button.js</span><br><span class="line">npx prettier --write app/**/*.test.js</span><br></pre></td></tr></table></figure><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p>使用 <code>eslint-config-prettier</code> 覆盖掉 ESLint 的代码风格规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint-config-prettier</span><br></pre></td></tr></table></figure><p>向根目录下 .eslintrc 文件中的 <strong>extend</strong> 增加 <code>&quot;prettier&quot;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;some-other-config-you-use&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;prettier&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>配置根目录下 .prettierrc 文件如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;eslintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//</span></span><br><span class="line">    <span class="attr">&quot;stylelintIntegration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>        <span class="comment">// 缩进字符</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 要不要单引号</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span>         <span class="comment">// 要不要使用 ;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>配置保存自动格式化，在用户的 <code>setting.json</code> 文件中加上如下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">&quot;eslint.format.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## others ##</span><br><span class="line"></span><br><span class="line">### git hook ###</span><br><span class="line"></span><br><span class="line">如有需要忽略代码风格</span><br><span class="line"></span><br><span class="line">使用 husky 和 lint-staged 来确保每次提交前代码已是格式化后的状态，配置参考如下</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;**/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span> <span class="string">&quot;prettier --write&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="about"><a href="#about" class="headerlink" title="about"></a>about</h2><ol><li><a href="https://prettier.io/docs/en/index.html">Prettier</a></li><li><a href="https://github.com/okonet/lint-staged#readme">lint-staged</a></li><li><a href="https://github.com/typicode/husky#readme">husky</a></li></ol><h1 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h1><p>语法检查部分大致包含：变量检查（重复引用，引入但未使用，声明但未使用。。。），无意义的bind</p><p>一般情况下，脚手架都自带了基础的 eslint 配置，所以主要还是注意eslint 的 plugin 的安装配置，参考如下</p><h2 id="about-1"><a href="#about-1" class="headerlink" title="about"></a>about</h2><ol><li><a href="https://eslint.org/docs/user-guide/getting-started">eslint</a></li><li><a href="https://eslint.org/docs/developer-guide/working-with-plugins">working-with-plugins</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;考虑各项目间的统一，使用 prettier 进行项目的代码风格格式化，使用 eslint 做语法检查，具体规范如下&lt;/p&gt;</summary>
    
    
    
    <category term="standard" scheme="https://snowyyu.github.io/categories/standard/"/>
    
    
    <category term="vscode" scheme="https://snowyyu.github.io/tags/vscode/"/>
    
    <category term="IDE" scheme="https://snowyyu.github.io/tags/IDE/"/>
    
    <category term="standard" scheme="https://snowyyu.github.io/tags/standard/"/>
    
  </entry>
  
  <entry>
    <title>docker入门</title>
    <link href="https://snowyyu.github.io/2020/06/29/docker%E5%85%A5%E9%97%A8/"/>
    <id>https://snowyyu.github.io/2020/06/29/docker%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-29T08:11:52.000Z</published>
    <updated>2020-06-29T08:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录些安装，配置，和使用上的一些心得，方便日后查阅</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="在centOS上安装"><a href="#在centOS上安装" class="headerlink" title="在centOS上安装"></a>在centOS上安装</h2><p>mac 上安装的话直接有相应的安装包，很简单，现在主要说下服务端的，流程大致可以参考官方 <a href="https://docs.docker.com/engine/install/centos/">docker install</a>，不过要注意，我在centos8 上执行到 <code>sudo yum install docker-ce docker-ce-cli containerd.io</code> 命令报错（应该是containerd.io版本问题）。</p><p>此时需要先执行 </p><p><code>dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</code> </p><p>先安装 containerd.io。</p><p>再执行 <code>sudo yum install docker-ce docker-ce-cli</code> ,<code>sudo systemctl start docker</code> 安装剩下两个</p><h2 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h2><p>编辑 <code>sudo vi /etc/docker/daemon.json</code><br>加入如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;https://1nj0zren.mirror.aliyuncs.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;http://f1361db2.m.daocloud.io&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>好像 <code>&quot;https://registry.docker-cn.com&quot;</code> 失效了</p></blockquote><h1 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h1><p>参考官方安装文档 <a href="https://docs.docker.com/compose/install/">compose install</a></p><ol><li>下载安装  </li></ol><p><code>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code><br>2. 给权限 <code>sudo chmod +x /usr/local/bin/docker-compose</code><br>3. 测试是否安装成功 <code>docker-compose --version</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录些安装，配置，和使用上的一些心得，方便日后查阅&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://snowyyu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>微信授权相关</title>
    <link href="https://snowyyu.github.io/2020/02/22/%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%9B%B8%E5%85%B3/"/>
    <id>https://snowyyu.github.io/2020/02/22/%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%9B%B8%E5%85%B3/</id>
    <published>2020-02-22T13:44:08.000Z</published>
    <updated>2020-02-22T13:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>已经写过挺多授权部分的了，这里做写记录，并且附上相关的链接，以便后续查阅</p><span id="more"></span><h1 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h1><p>其实官网文档已经相当之详细了，这里特地记录下每一步骤实现所用的代码以及相关的工具函数</p><blockquote><p>所以重点还是要看看官方文档</p></blockquote><h2 id="1-获取code"><a href="#1-获取code" class="headerlink" title="1.获取code"></a>1.获取code</h2><p>获取code方法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wechatAuth</span> (appId, redirectUri, responseType, scope, state) &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;https://open.weixin.qq.com/connect/oauth2/authorize&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> queryString = <span class="string">&#x27;appid=&#x27;</span> + appId + <span class="string">&#x27;&amp;redirect_uri=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(redirectUri) + <span class="string">&#x27;&amp;response_type=&#x27;</span> + responseType + <span class="string">&#x27;&amp;scope=&#x27;</span> + scope + <span class="string">&#x27;&amp;state=&#x27;</span> + state</span><br><span class="line">  location.<span class="property">href</span> = url + <span class="string">&#x27;?&#x27;</span> + queryString + <span class="string">&#x27;#wechat_redirect&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-通过code换取网页授权-access-token-和-openid"><a href="#2-通过code换取网页授权-access-token-和-openid" class="headerlink" title="2.通过code换取网页授权 access_token 和 openid"></a>2.通过code换取网页授权 access_token 和 openid</h2><p>一般获取access_token 和 openid 都是由后台获取到，因为获取上面两个参数除了code外还需要传secret参数，出于安全考虑不会写在前端(参照文档)</p><h2 id="3-刷新access-token-如果需要"><a href="#3-刷新access-token-如果需要" class="headerlink" title="3.刷新access_token (如果需要)"></a>3.刷新access_token (如果需要)</h2><p>access_token scope为 snsapi_base 时，access_token似乎没啥用处</p><h2 id="4-拉取用户信息-需scope为snsapi-userinfo"><a href="#4-拉取用户信息-需scope为snsapi-userinfo" class="headerlink" title="4.拉取用户信息(需scope为snsapi_userinfo)"></a>4.拉取用户信息(需scope为snsapi_userinfo)</h2><p>注意scope，这里针对scope为 snsapi_userinfo 的情景，即需要获取用户openid以外的更多信息</p><h2 id="5-tips"><a href="#5-tips" class="headerlink" title="5.tips"></a>5.tips</h2><h3 id="获取url中code参数的方法"><a href="#获取url中code参数的方法" class="headerlink" title="获取url中code参数的方法"></a>获取url中code参数的方法</h3><ol><li>自写一个原生的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getUrlParams (query, _url) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = _url || <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line">  <span class="keyword">const</span> paramsString = url.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) &gt; -<span class="number">1</span> ? url.<span class="title function_">substring</span>(url.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) + <span class="number">1</span>, url.<span class="property">length</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>) : []</span><br><span class="line">  <span class="keyword">let</span> paramsObj = &#123;&#125;</span><br><span class="line">  paramsString.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    paramsObj[item.<span class="title function_">substring</span>(<span class="number">0</span>, item.<span class="title function_">indexOf</span>(<span class="string">&#x27;=&#x27;</span>))] = item.<span class="title function_">substring</span>(item.<span class="title function_">indexOf</span>(<span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>, item.<span class="property">length</span>).<span class="title function_">split</span>(<span class="string">&#x27;#&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(query).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Array&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> paramsObj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> returnValue = paramsObj[query]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (returnValue) === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> returnValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>vue 中的 router相关方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">code</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="存储相关配置参数的位置"><a href="#存储相关配置参数的位置" class="headerlink" title="存储相关配置参数的位置"></a>存储相关配置参数的位置</h3><p>微信和支付宝授权啊支付啊什么的都需要传一些参数给支付宝或微信的后台，就前端来说，常见的如下</p><blockquote><p>appid scope redirect_uri 等<br>那这些固定的常量都写在哪里呢？之前我会单新建一个config文件夹，然后分别创建微信和支付宝所需要用到的配置文件，不过有时候在测试的时候不想一遍遍的请求微信那边的授权（比如我只是想那个openid请求自己应用的接口），所以会额外加一些已知的openid userinfo 等，这些往往会再加多两个文件，而且还要加多一些有关开发和生产环境的判断等等</p></blockquote><p>所以如果是在vue-cli的开发环境下，推荐使用<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F">环境变量和模式</a></p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">微信官方文档-网页授权</a></li><li><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F">vue-cli环境变量和模式</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;已经写过挺多授权部分的了，这里做写记录，并且附上相关的链接，以便后续查阅&lt;/p&gt;</summary>
    
    
    
    
    <category term="WeChat" scheme="https://snowyyu.github.io/tags/WeChat/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 相关</title>
    <link href="https://snowyyu.github.io/2019/12/13/Visual-Studio-Code-%E7%9B%B8%E5%85%B3/"/>
    <id>https://snowyyu.github.io/2019/12/13/Visual-Studio-Code-%E7%9B%B8%E5%85%B3/</id>
    <published>2019-12-13T10:53:51.000Z</published>
    <updated>2019-12-13T10:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用 setting sync 同步过别人 git gist 上的 vsCode 配置，接触了一些很好用的功能，不过同时也有大量的拓展和相关配置一并被下载下来了，然后就遇到了些问题，现在准备重新安装 vscode</p><span id="more"></span><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><h1 id="之前遇到的问题"><a href="#之前遇到的问题" class="headerlink" title="之前遇到的问题"></a>之前遇到的问题</h1><ol><li>debug 配置文件 lanch.js 无法触发 智能输入</li></ol><h1 id="拓展部分"><a href="#拓展部分" class="headerlink" title="拓展部分"></a>拓展部分</h1><ol><li><strong>YAML</strong> 支持</li><li><strong>Auto Close Tag</strong> 自动添加 html/xml 闭合标签</li><li><strong>Auto Rename Tag</strong> 修改标签名的辅助插件</li><li><strong>Auto import</strong> 自动 import</li><li><strong>Babel JavaScript</strong> 支持 react jsx， es201* flow GraphQL 的语法高亮</li><li><strong>Bash Debug</strong> debug 下的 lanch.js 配置支持</li><li><strong>Better Comments</strong> 注释用的，让注释更加可视化，五颜六色的</li><li><strong>Branket Pair colorizer</strong> 标签，括号，范围提示</li><li><strong>Community Material Theme</strong> 一个主题，注意相关配置</li><li><strong>Dart dart</strong> 语言支持</li><li><strong>Debugger for Chrome</strong> 基于 chrome 的调试工具</li><li><strong>Django</strong></li><li><strong>Docker</strong></li><li><strong>DotENV</strong> 环境配置文件(.env,.env.development……结尾)语法高亮</li><li><strong>EJS language support</strong></li><li><strong>ES6 Mocha Snippets</strong></li><li><strong>ES7 React/Redux/GraphQL/React-Native snippets</strong></li><li><strong>ESLint</strong></li><li><strong>Formatting Toggle</strong></li><li><strong>GitLens</strong> — Git supercharged git 拓展</li><li><strong>HTML CSS Support</strong> html css 拓展</li><li><strong>Ignore files</strong> .gitignore 等文件的语法高亮</li><li><strong>Import Cost</strong> 自动计算 import 文件的大小</li><li><strong>IntelliSense for CSS class names in HTML</strong> 自动检测引入的类名，智能提示补全</li><li><strong>JavaScript (ES6) code snippets</strong> es6 代码片段</li><li><strong>JavaScript Booster</strong></li><li><strong>Jest Snippets</strong></li><li><strong>Jinja</strong></li><li><strong>JS Refactor</strong></li><li><strong>json2ts</strong> 将 json 转化为 ts interface 文件</li><li><strong>LeetCode</strong> 算法题目</li><li><strong>Less IntelliSense</strong> less 的智能辅助</li><li><strong>Live Sass Compiler</strong> 一个即时 sass 编译插件</li><li><strong>koroFileHeader</strong> 用于一键生成文件头部注释并自动更新最后编辑人和编辑时间、函数注释自动生成和参数提取</li></ol><p>主要是对安装的拓展做个简介，方便自己后续的查找</p><h1 id="同步-gist"><a href="#同步-gist" class="headerlink" title="同步 gist"></a>同步 gist</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前使用 setting sync 同步过别人 git gist 上的 vsCode 配置，接触了一些很好用的功能，不过同时也有大量的拓展和相关配置一并被下载下来了，然后就遇到了些问题，现在准备重新安装 vscode&lt;/p&gt;</summary>
    
    
    
    
    <category term="VSCode" scheme="https://snowyyu.github.io/tags/VSCode/"/>
    
  </entry>
  
</feed>
